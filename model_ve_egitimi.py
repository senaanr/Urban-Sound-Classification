# -*- coding: utf-8 -*-
"""Model_ve_Egitimi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GLOYo8Ydj3dRrOG24JzrWIZDKiS65m05
"""

import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split

#Önceden kaydedilen datanın eklenmesi
X = np.load("X.npy")
y = np.load("y.npy")

#burada bir daha datayı ayırdık çünkü ram yetersiz kalıyordu
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

X_val = X_train[4000:]
y_val = y_train[4000:]

X_train = X_train/255
X_test = X_test/255
X_val =  X_val/255

#yer açmak için kullanılmayacak değişkenlerin silinmesi
del X,y

#modelin hazırlanması
model = tf.keras.Sequential() 
model.add(tf.keras.layers.Dense(4096, activation = "relu",input_shape = (X_train[0].shape[0],)))
model.add(tf.keras.layers.Dropout(0.5))

model.add(tf.keras.layers.Dense(4096, activation = "relu"))
model.add(tf.keras.layers.Dropout(0.5))

model.add(tf.keras.layers.Dense(4096, activation = "relu"))
model.add(tf.keras.layers.Dropout(0.5))

model.add(tf.keras.layers.Dense(4096, activation = "relu"))
model.add(tf.keras.layers.Dropout(0.5))

model.add(tf.keras.layers.Dense(10, activation = "softmax"))
      
model.compile(optimizer = "adam" , loss = "sparse_categorical_crossentropy", metrics = ["accuracy"])

#model eğitimi
results = model.fit(X_train, y_train, epochs = 100,batch_size=64, validation_data=(X_val, y_val),validation_batch_size=64)

import matplotlib.pyplot as plt
plt.plot(results.history["loss"], label="loss")

plt.plot(results.history["val_loss"], label="val_loss")
s
plt.xlabel("Epoch")
plt.ylabel("Loss")

plt.legend()

plt.show()

plt.plot(results.history["accuracy"], label="accuracy")
plt.plot(results.history["val_accuracy"], label="val_accuracy")

plt.xlabel("Epoch")
plt.ylabel("Accuracy")

plt.legend()

plt.show()

