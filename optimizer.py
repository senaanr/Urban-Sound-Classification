# -*- coding: utf-8 -*-
"""Optimizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SSGt0w1puQ5mgNkvAuLkDrBRlhLxy7eJ
"""

import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split

#Önceden kaydedilen normalize edilmiş datanın eklenmesi(Ram'den tasaruf için)
X = np.load("X_normalized.npy")
y = np.load("y.npy")

#Data'nın train test ayrımı
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

#Ram'de yer açmak için kullanılmayacak değikenlerin silinmesi
del X,y

print(f" X_train: {len(X_train)}")
print(f"X_test : {len(X_test)}")

X_val = X_train[2000:]
y_val = y_train[2000:]

#model oluşturulumunda kullanılacak değişken değerlerinin atanması
epochs=60
learning_rate = 0.1
decay_rate = learning_rate / epochs
momentum = 0.8
num_classes = 10

from keras.optimizers import SGD
sgd = SGD(lr=learning_rate, momentum=momentum, decay=decay_rate, nesterov=False)

input_dim = X_train.shape[1]

#model oluşturma
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout

lr_model = Sequential()
lr_model.add(Dense(64, activation=tf.nn.relu, kernel_initializer='uniform', 
                input_dim = input_dim)) 
lr_model.add(Dropout(0.1))
lr_model.add(Dense(64, kernel_initializer='uniform', activation=tf.nn.relu))
lr_model.add(Dense(num_classes, kernel_initializer='uniform', activation=tf.nn.softmax))

lr_model.compile(loss='sparse_categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

batch_size = int(input_dim/100)
#model eğitimi
lr_model_history = lr_model.fit(X_train, y_train,
                    batch_size=batch_size,
                    epochs=epochs,
                    verbose=1,
                    validation_data=(X_val, y_val))

import matplotlib.pyplot as plt
plt.plot(lr_model_history.history["loss"], label="loss")

plt.plot(lr_model_history.history["val_loss"], label="val_loss")

plt.xlabel("Epoch")
plt.ylabel("Loss")

plt.legend()

plt.show()

plt.plot(lr_model_history.history["accuracy"], label="accuracy")
plt.plot(lr_model_history.history["val_accuracy"], label="val_accuracy")

plt.xlabel("Epoch")
plt.ylabel("Accuracy")

plt.legend()

plt.show()

